// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//set a instruction as not c instruction
	Not(in = instruction[15], out = a);

	//load A register if A is the destination or the instruction
	And(a = instruction[15], b = instruction[5], out = a1);
	Mux16(a = instruction, b = outM1, sel = a1, out = mux1);
	Or(a = a, b = a1, out = aload);
	ARegister(in = mux1, load = aload, out = aregister);

	//set addressM to 0 or Aregister output
	Or16(a = false, b = aregister, out[0..14] = addressM);	

	//use 'a' bit 
	Mux16(a = aregister, b = inM, sel = instruction[12], out = mux2);

	//load D register
	And(a = instruction[15], b = instruction[4], out = dload);
	DRegister(in = outM1, load = dload, out = dregister);

	//ALU
	ALU(x = dregister, y = mux2, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM1, zr = zr1, ng = ng1);


	//set outM to be 0 or the ALU output
	Or16(a = false, b = outM1, out = outM);
	//set writeM
	And(a = instruction[15], b = instruction[3], out = writeM);

	//calculate pcload
	
	//Jump if zero or negative as both ALU output and instruction
	And(a = zr1, b = instruction[1], out = jeq);
	And(a = ng1, b = instruction[2], out = jlt);

	//Jump if positive (not zero or negative)
	Or(a = zr1, b = ng1, out = zrng);
	Not(in = zrng, out = p);
	And(a = p, b = instruction[0], out = jgt);
	
	//Jump if there is any instruction to jump
	Or(a = jeq, b = jlt, out = jle);
	Or(a = jle, b = jgt, out = jump);

	//if C instruction is true, then jump
	And(a = instruction[15], b = jump, out = pc1);

	PC(in = aregister, inc = true, load = pc1, reset = reset, out[0..14] = pc);
	
}